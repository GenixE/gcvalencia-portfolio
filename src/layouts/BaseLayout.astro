---
import '../styles/global.css'

// Base layout for the portfolio
export interface Props {
  title?: string;
  description?: string;
}

const {
  title = "Gian Carlo Valencia - Web Developer",
  description = "Gian Carlo Valencia - Web Developer specializing in modern web technologies."
} = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<meta name="generator" content={Astro.generator} />
	<meta name="description" content={description} />
	<title>{title}</title>
</head>

<body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-white transition-colors duration-300">
	<slot />

	<script>
		// Wait for DOM to be fully loaded before running theme toggle functionality
		document.addEventListener('DOMContentLoaded', function() {
			// Theme toggle functionality
			const themeToggle = document.getElementById('theme-toggle');
			const html = document.documentElement;

			// Check for saved theme preference or default to system preference
			const savedTheme = localStorage.getItem('theme');
			const systemPreference = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
			const currentTheme = savedTheme || systemPreference;

			// Apply the theme
			if (currentTheme === 'dark') {
				html.classList.add('dark');
			}

			// Theme toggle event listener
			if (themeToggle) {
				themeToggle.addEventListener('click', () => {
					if (html.classList.contains('dark')) {
						html.classList.remove('dark');
						localStorage.setItem('theme', 'light');
					} else {
						html.classList.add('dark');
						localStorage.setItem('theme', 'dark');
					}
				});
			} else {
				console.warn('Theme toggle button not found - make sure element with id="theme-toggle" exists');
			}

			// Listen for system theme changes
			window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
				if (!localStorage.getItem('theme')) {
					if (e.matches) {
						html.classList.add('dark');
					} else {
						html.classList.remove('dark');
					}
				}
			});

			// Active navigation link tracking
			const navLinks = document.querySelectorAll('.nav-link, .nav-link-mobile');
			const sections = document.querySelectorAll('section[id]');

			function updateActiveLink() {
				let currentSection = '';
				const scrollPosition = window.scrollY + 100; // Offset for header height

				sections.forEach(section => {
					const sectionTop = section.offsetTop;
					const sectionHeight = section.offsetHeight;

					if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
						currentSection = section.getAttribute('id');
					}
				});

				// Update active states
				navLinks.forEach(link => {
					const href = link.getAttribute('href');
					link.classList.remove('active');

					if (href === `#${currentSection}`) {
						link.classList.add('active');
					}
				});
			}

			// Update active link on scroll
			window.addEventListener('scroll', updateActiveLink);

			// Update active link on page load
			updateActiveLink();

			// Smooth scrolling for navigation links
			document.querySelectorAll('a[href^="#"]').forEach(anchor => {
				anchor.addEventListener('click', function (e) {
					e.preventDefault();
					const target = document.querySelector(this.getAttribute('href'));
					if (target) {
						const headerHeight = 80;
						const targetPosition = target.offsetTop - headerHeight;

						window.scrollTo({
							top: targetPosition,
							behavior: 'smooth'
						});
					}
				});
			});

			// Add scroll-based navbar background
			window.addEventListener('scroll', () => {
				const header = document.querySelector('header');
				if (window.scrollY > 50) {
					header?.classList.add('scrolled');
				} else {
					header?.classList.remove('scrolled');
				}
			});

			// Intersection Observer for fade-in animations
			const observerOptions = {
				threshold: 0.1,
				rootMargin: '0px 0px -50px 0px'
			};

			const observer = new IntersectionObserver((entries) => {
				entries.forEach(entry => {
					if (entry.isIntersecting) {
						entry.target.classList.add('animate-fade-in');
					}
				});
			}, observerOptions);

			// Observe all sections for animations
			document.querySelectorAll('section').forEach(section => {
				observer.observe(section);
			});
		});
	</script>

	<style>
		/* Custom scrollbar */
		::-webkit-scrollbar {
			width: 8px;
		}

		::-webkit-scrollbar-track {
			background: #f1f1f1;
		}

		.dark ::-webkit-scrollbar-track {
			background: #374151;
		}

		::-webkit-scrollbar-thumb {
			background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
			border-radius: 4px;
		}

		::-webkit-scrollbar-thumb:hover {
			background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
		}

		/* Smooth scroll behavior */
		html {
			scroll-behavior: smooth;
		}

		/* Animation for fade-in elements */
		.animate-fade-in {
			opacity: 1;
			transform: translateY(0);
			transition: opacity 0.6s ease-out, transform 0.6s ease-out;
		}

		/* Initial state for sections */
		section {
			opacity: 0;
			transform: translateY(20px);
		}

		/* Header scroll effect */
		header.scrolled {
			background: rgba(255, 255, 255, 0.95);
			backdrop-filter: blur(20px);
		}

		.dark header.scrolled {
			background: rgba(17, 24, 39, 0.95);
		}

		/* Loading animation for better UX */
		.loading {
			opacity: 0;
			animation: fadeIn 0.5s ease-in forwards;
		}

		@keyframes fadeIn {
			to {
				opacity: 1;
			}
		}

		/* Custom gradient text */
		.gradient-text {
			background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
			-webkit-background-clip: text;
			background-clip: text;
			-webkit-text-fill-color: transparent;
		}
	</style>
</body>
</html>
